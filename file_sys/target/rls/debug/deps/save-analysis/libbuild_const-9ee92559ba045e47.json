{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\build_const-0.2.1","program":"C:\\Users\\Beni\\.rustup\\toolchains\\stable-i686-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","build_const","C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\build_const-0.2.1\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata,link","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=9ee92559ba045e47","-C","extra-filename=-9ee92559ba045e47","--out-dir","c:\\Users\\Beni\\Documents\\work\\File_Sys\\file_sys\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\Beni\\Documents\\work\\File_Sys\\file_sys\\target\\rls\\debug\\deps","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\Beni\\.rustup/toolchains/stable-i686-pc-windows-msvc"],"output":"c:\\Users\\Beni\\Documents\\work\\File_Sys\\file_sys\\target\\rls\\debug\\deps\\libbuild_const-9ee92559ba045e47.rmeta"},"prelude":{"crate_id":{"name":"build_const","disambiguator":[12725151823099751193,2938225585323719621]},"crate_root":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\build_const-0.2.1\\src","external_crates":[{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\build_const-0.2.1\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[17547299525433066937,6462703543472652821]}},{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\build_const-0.2.1\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[6764811272097449003,13681722573116367099]}},{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\build_const-0.2.1\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[9485826678459717252,15756974541460141494]}},{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\build_const-0.2.1\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[15954912595519161470,12922162993496933985]}},{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\build_const-0.2.1\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[5824572747488578400,18164785604033351576]}},{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\build_const-0.2.1\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[10331641369357162511,17836984904787579268]}},{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\build_const-0.2.1\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[8495357030570666042,9830701870303456689]}},{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\build_const-0.2.1\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[9657771536831955996,2892192969278695320]}},{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\build_const-0.2.1\\src\\lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[12375917788909833983,1997691704544372736]}},{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\build_const-0.2.1\\src\\lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[16952125311933509182,18402636855086965869]}},{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\build_const-0.2.1\\src\\lib.rs","num":11,"id":{"name":"hashbrown","disambiguator":[10744862195025581238,6478452609884575256]}},{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\build_const-0.2.1\\src\\lib.rs","num":12,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8143783028888645125,5443838079021418384]}},{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\build_const-0.2.1\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[2060411395260400816,11913745625441100273]}}],"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\build_const-0.2.1\\src\\lib.rs","byte_start":0,"byte_end":2517,"line_start":1,"line_end":87,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":11},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\build_const-0.2.1\\src\\lib.rs","byte_start":1394,"byte_end":1405,"line_start":42,"line_end":42,"column_start":5,"column_end":16},"alias_span":null,"name":"ConstWriter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":13},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\build_const-0.2.1\\src\\lib.rs","byte_start":1411,"byte_end":1427,"line_start":43,"line_end":43,"column_start":5,"column_end":21},"alias_span":null,"name":"ConstValueWriter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":30},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\build_const-0.2.1\\src\\lib.rs","byte_start":1433,"byte_end":1444,"line_start":44,"line_end":44,"column_start":5,"column_end":16},"alias_span":null,"name":"write_array","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":33},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\build_const-0.2.1\\src\\lib.rs","byte_start":1450,"byte_end":1465,"line_start":45,"line_end":45,"column_start":5,"column_end":20},"alias_span":null,"name":"write_array_raw","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\build_const-0.2.1\\src\\lib.rs","byte_start":0,"byte_end":2517,"line_start":1,"line_end":87,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\build_const-0.2.1\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":41},{"krate":0,"index":46},{"krate":0,"index":47}],"decl_id":null,"docs":" `build_const`: crate for creating constants in your build script","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\build_const-0.2.1\\src\\writer.rs","byte_start":3604,"byte_end":3615,"line_start":40,"line_end":40,"column_start":12,"column_end":23},"name":"ConstWriter","qualname":"::writer::ConstWriter","value":"ConstWriter {  }","parent":null,"children":[{"krate":0,"index":12}],"decl_id":null,"docs":" Primary object used to write constant files.\n \n # Example\n ```no_run\n # use std::path::Path;\n # #[derive(Debug)]\n # struct Point { x: u8, y: u8 }\n use build_const::ConstWriter;\n \n // use `for_build` in `build.rs`\n let mut consts = ConstWriter::from_path(\n     &Path::new(\"/tmp/constants.rs\")\n ).unwrap();\n \n // add an external dependency (`use xyz::Point`)\n consts.add_dependency(\"xyz::Point\");\n \n // finish dependencies and starting writing constants\n let mut consts = consts.finish_dependencies();","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":13},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\build_const-0.2.1\\src\\writer.rs","byte_start":3743,"byte_end":3759,"line_start":46,"line_end":46,"column_start":12,"column_end":28},"name":"ConstValueWriter","qualname":"::writer::ConstValueWriter","value":"ConstValueWriter {  }","parent":null,"children":[{"krate":0,"index":14}],"decl_id":null,"docs":" Created from `ConstWriter::finish_dependencies`. See\n documentation for `ConstWriter`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":16},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\build_const-0.2.1\\src\\writer.rs","byte_start":3880,"byte_end":3889,"line_start":52,"line_end":52,"column_start":12,"column_end":21},"name":"for_build","qualname":"<ConstWriter>::for_build","value":"fn (mod_name: &str) -> io::Result<ConstWriter>","parent":null,"children":[],"decl_id":null,"docs":" Create a ConstWriter to be used for your crate's `build.rs`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":17},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\build_const-0.2.1\\src\\writer.rs","byte_start":4322,"byte_end":4331,"line_start":64,"line_end":64,"column_start":12,"column_end":21},"name":"from_path","qualname":"<ConstWriter>::from_path","value":"fn (path: &Path) -> io::Result<ConstWriter>","parent":null,"children":[],"decl_id":null,"docs":" Create a new ConstWriter to write to an path. If a file\n already exists at the path then it will be deleted.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":18},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\build_const-0.2.1\\src\\writer.rs","byte_start":4628,"byte_end":4647,"line_start":75,"line_end":75,"column_start":12,"column_end":31},"name":"finish_dependencies","qualname":"<ConstWriter>::finish_dependencies","value":"fn (self) -> ConstValueWriter","parent":null,"children":[],"decl_id":null,"docs":" finish writing dependencies and start writing constants\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":19},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\build_const-0.2.1\\src\\writer.rs","byte_start":4782,"byte_end":4796,"line_start":80,"line_end":80,"column_start":12,"column_end":26},"name":"add_dependency","qualname":"<ConstWriter>::add_dependency","value":"fn (&mut self, lib: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Add a dependency to your constants file.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":20},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\build_const-0.2.1\\src\\writer.rs","byte_start":5019,"byte_end":5026,"line_start":87,"line_end":87,"column_start":12,"column_end":19},"name":"add_raw","qualname":"<ConstWriter>::add_raw","value":"fn (&mut self, raw: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Add a raw string to the constants file.\n \n This method only changes `raw` by adding a `\\n` at the end.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\build_const-0.2.1\\src\\writer.rs","byte_start":5535,"byte_end":5544,"line_start":102,"line_end":102,"column_start":12,"column_end":21},"name":"add_value","qualname":"<ConstValueWriter>::add_value","value":"fn <T> (&mut self, name: &str, ty: &str, value: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Add a value to the constants file.\n \n You have to manually specify the `name`, type (`ty`) and `value`\n of the constant you want to add.\n \n The `value` uses the `Debug` trait to determine the formating of\n the value being added. If `Debug` is not accurate or will not work,\n you must use `add_value_raw` instead and format it yourself.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\build_const-0.2.1\\src\\writer.rs","byte_start":5964,"byte_end":5977,"line_start":111,"line_end":111,"column_start":12,"column_end":25},"name":"add_value_raw","qualname":"<ConstValueWriter>::add_value_raw","value":"fn (&mut self, name: &str, ty: &str, raw_value: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Add a pre-formatted value to the constants file.\n \n `add_value` depends on `Debug` being implemented in such a way\n that it accurately represents the type's creation. Sometimes that\n cannot be relied on and `add_value_raw` has to be used instead.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\build_const-0.2.1\\src\\writer.rs","byte_start":6760,"byte_end":6769,"line_start":131,"line_end":131,"column_start":12,"column_end":21},"name":"add_array","qualname":"<ConstValueWriter>::add_array","value":"fn <T> (&mut self, name: &str, ty: &str, values: &[T]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Add an array of len > 0 to the constants\n \n You have to manually specify the `name`, type (`ty`) of the **items** and \n `values` of the array constant you want to add. The length of the array\n is determined automatically.\n \n Example: `const.add_array(\"foo\", \"u16\", &[1,2,3])`\n \n The `value` of each item uses the `Debug` trait to determine the \n formatting of the value being added. If `Debug` is not accurate or will \n not work, you must use `add_array_raw` instead and format it yourself.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":27},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\build_const-0.2.1\\src\\writer.rs","byte_start":7268,"byte_end":7281,"line_start":141,"line_end":141,"column_start":12,"column_end":25},"name":"add_array_raw","qualname":"<ConstValueWriter>::add_array_raw","value":"fn (&mut self, name: &str, ty: &str, raw_values: &[&str]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Add an array of pre-formatted values to the constants file. The length of the array is\n determined automatically.\n \n `add_array` depends on `Debug` being implemented for each item in such a way that it\n accurately represents the item's creation. Sometimes that cannot be relied on and\n `add_array_raw` has to be used instead.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\build_const-0.2.1\\src\\writer.rs","byte_start":7541,"byte_end":7548,"line_start":148,"line_end":148,"column_start":12,"column_end":19},"name":"add_raw","qualname":"<ConstValueWriter>::add_raw","value":"fn (&mut self, raw: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Add a raw string to the constants file.\n \n This method only changes `raw` by adding a `\\n` at the end.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\build_const-0.2.1\\src\\writer.rs","byte_start":7700,"byte_end":7706,"line_start":153,"line_end":153,"column_start":12,"column_end":18},"name":"finish","qualname":"<ConstValueWriter>::finish","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Finish writing to the constants file and consume self.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":30},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\build_const-0.2.1\\src\\writer.rs","byte_start":7924,"byte_end":7935,"line_start":164,"line_end":164,"column_start":8,"column_end":19},"name":"write_array","qualname":"::writer::write_array","value":"fn <T, W> (w: &mut W, name: &str, ty: &str, values: &[T]) -> String","parent":null,"children":[],"decl_id":null,"docs":" Write an array and return the array's full type representation.\n \n This can be used to create nested array constant types.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":33},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\build_const-0.2.1\\src\\writer.rs","byte_start":8527,"byte_end":8542,"line_start":183,"line_end":183,"column_start":8,"column_end":23},"name":"write_array_raw","qualname":"::writer::write_array_raw","value":"fn <W> (w: &mut W, name: &str, ty: &str, raw_values: &[&str]) -> String","parent":null,"children":[],"decl_id":null,"docs":" Write an array of raw values and return the array's full type representation.\n \n This can be used to create nested array constant types.\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\build_const-0.2.1\\src\\writer.rs","byte_start":3787,"byte_end":3798,"line_start":50,"line_end":50,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\build_const-0.2.1\\src\\writer.rs","byte_start":5112,"byte_end":5128,"line_start":93,"line_end":93,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":22},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\build_const-0.2.1\\src\\writer.rs","byte_start":3787,"byte_end":3798,"line_start":50,"line_end":50,"column_start":6,"column_end":17},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":11},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\build_const-0.2.1\\src\\writer.rs","byte_start":5112,"byte_end":5128,"line_start":93,"line_end":93,"column_start":6,"column_end":22},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":13},"to":{"krate":4294967295,"index":4294967295}}]}